/*
 (c) 2015, Sergey Alekseev salekseev@scanex.ru
 Leaflet.WindWebGL, plugin for Gemixer layers.
*/
(function() {
    var options = {
        antialias: true
    };
    var shaders = {
        'shader-vs': {
            type: "x-shader/x-vertex",
            value: [
                'uniform mat4 u_matrix;',
                'attribute vec4 a_vertex;',
                'attribute float a_pointSize;',
                'attribute vec4 a_color;',
                'varying vec4 v_color;',

                'void main() {',
                    'gl_PointSize =  a_pointSize;',         // Set the size of the point
                    'gl_Position = u_matrix * a_vertex;',   // multiply each vertex by a matrix.
                    'v_color = a_color;',                   // pass the color to the fragment shader
                '}'
                ].join("\n")
        },

        'shader-fs': {
            type: "x-shader/x-fragment",
            value: [
                'precision mediump float;',
                'varying vec4 v_color;',

                'void main() {',

                    'float border = 0.05;',
                    'float radius = 0.5;',
                    'vec4 color0 = vec4(0.0, 0.0, 0.0, 0.0);',
                    'vec4 color1 = vec4(v_color[0], v_color[1], v_color[2], 0.8);',

                    'vec2 m = gl_PointCoord.xy - vec2(0.5, 0.5);',
                    'float dist = radius - sqrt(m.x * m.x + m.y * m.y);',

                    'float t = 0.0;',
                    'if (dist > border) {',
                        't = 1.0;',
                    '} else if (dist > 0.0) {',
                        't = dist / border;',
                    '}',

                    // float centerDist = length(gl_PointCoord - 0.5);
                    // works for overlapping circles if blending is enabled

                    'gl_FragColor = mix(color0, color1, t);',

                    /*
                    // -- another way for circle
                    float centerDist = length(gl_PointCoord - 0.5);
                    float radius = 0.5;
                    // works for overlapping circles if blending is enabled
                    gl_FragColor = vec4(v_color[0], v_color[1], v_color[2], 0.2 * step(centerDist, radius));
                    */

                    /*
                    // simple circles
                    float d = distance (gl_PointCoord, vec2(0.5,0.5));
                    if (d < 0.5 ){
                    gl_FragColor =vec4(v_color[0], v_color[1], v_color[2], 0.2);
                    }
                    else{
                    discard;
                    }
                    */

                    // -- squares
                    //gl_FragColor = v_color;
                    //gl_FragColor =vec4(v_color[0], v_color[1], v_color[2], 0.2); // v_color;

                '}'
                ].join("\n")
        }
    };
var gl,
    leafletMap,
    resCanvas,
    shaderProgram,
    vertexBuffer,   // буфер вершин
    indexBuffer,    //буфер индексов
    pixelsToWebGLMatrix = new Float32Array(16),
    mapMatrix = new Float32Array(16);
    // mvMatrix,
    // pMatrix
    //;

// Функция создания шейдера
function getShader(type, id) {
    var shader = gl.createShader(type);

    gl.shaderSource(shader, shaders[id].value);
    gl.compileShader(shader);

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        console.warn("Ошибка компиляции шейдера: " + gl.getShaderInfoLog(shader));
        gl.deleteShader(shader);  
        return null;
    }
    return shader; 
}

// установка шейдеров
function initShaders() {
    var fragmentShader = getShader(gl.FRAGMENT_SHADER, 'shader-fs');
    var vertexShader = getShader(gl.VERTEX_SHADER, 'shader-vs');
 
    shaderProgram = gl.createProgram();
 
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
 
    gl.linkProgram(shaderProgram);
      
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        alert("Не удалось установить шейдеры");
    }
      
    gl.useProgram(shaderProgram);
/* 
    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
    gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
    shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
    gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
    
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
        gl.enable(gl.BLEND);
      //  gl.disable(gl.DEPTH_TEST);
        // ----------------------------
        // look up the locations for the inputs to our shaders.
        var u_matLoc = gl.getUniformLocation(program, "u_matrix");
        var colorLoc = gl.getAttribLocation(program, "a_color");
        var vertLoc = gl.getAttribLocation(program, "a_vertex");
        gl.aPointSize = gl.getAttribLocation(program, "a_pointSize");
        // Set the matrix to some that makes 1 unit 1 pixel.

        pixelsToWebGLMatrix.set([2 / canvas.width, 0, 0, 0, 0, -2 / canvas.height, 0, 0, 0, 0, 0, 0, -1, 1, 0, 1]);
        gl.viewport(0, 0, canvas.width, canvas.height);

        gl.uniformMatrix4fv(u_matLoc, false, pixelsToWebGLMatrix);
*/
}
/*
function initShaders() {
    var fragmentShader = getShader(gl.FRAGMENT_SHADER, 'shader-fs');
    var vertexShader = getShader(gl.VERTEX_SHADER, 'shader-vs');
 
    shaderProgram = gl.createProgram();
 
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
 
    gl.linkProgram(shaderProgram);
      
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        alert("Не удалось установить шейдеры");
    }
      
    gl.useProgram(shaderProgram);
 
    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
    gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
    // создания переменных uniform для передачи матриц в шейдер
    shaderProgram.MVMatrix = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    shaderProgram.ProjMatrix = gl.getUniformLocation(shaderProgram, "uPMatrix");
}
*/
function setMatrixUniforms(){
    gl.uniformMatrix4fv(shaderProgram.ProjMatrix,false, pMatrix);
    gl.uniformMatrix4fv(shaderProgram.MVMatrix, false, mvMatrix); 
}
// установка буфера вершин
function initBuffers() {
 
var vertices = [
         0.0,  0.5,  0.0,
        -0.5, -0.5,  0.0,
         0.5, -0.5,  0.0
  ];
  // установка буфера вершин
  vertexBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
  vertexBuffer.itemSize = 3;
  vertexBuffer.numberOfItems = 3;
  var сolors = [
        1.0, 0.0, 0.0,
        0.0, 0.0, 1.0,
        0.0, 1.0, 0.0
    ];
    colorBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(сolors), gl.STATIC_DRAW);
}
// отрисовка
function draw() {   
    // установка области отрисовки
    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
 
    gl.clear(gl.COLOR_BUFFER_BIT);
   
    // указываем, что каждая вершина имеет по три координаты (x, y, z)
    gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute,
                         vertexBuffer.itemSize, gl.FLOAT, false, 0, 0);

    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
    gl.vertexAttribPointer(shaderProgram.vertexColorAttribute,
                        vertexBuffer.itemSize, gl.FLOAT, false, 0, 0);
     
    gl.drawArrays(gl.POINTS, 0, vertexBuffer.numberOfItems);
}
/*
 // установка буферов вершин и индексов
function initBuffers() {
 
    var vertices =[
                // лицевая часть
                -0.5, -0.5, 0.5,
                -0.5, 0.5, 0.5,
                 0.5, 0.5, 0.5,
                 0.5, -0.5, 0.5,
                // задняя часть
                -0.5, -0.5, -0.5,
                -0.5, 0.5, -0.5,
                 0.5, 0.5, -0.5,
                 0.5, -0.5, -0.5];
                  
    var indices = [0, 1, 1, 2, 2, 3, 3, 0, 0, 4, 4, 5, 5, 6, 6,7, 7,4, 1, 5, 2, 6, 3, 7];
     
 // установка буфера вершин
  vertexBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
 
  vertexBuffer.itemSize = 3;
 
  // создание буфера индексов
  indexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
    // указываем число индексов это число равно числу индексов
    indexBuffer.numberOfItems = indices.length;
}
  
function draw() {   
     
    gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute,
                         vertexBuffer.itemSize, gl.FLOAT, false, 0, 0);
 
    gl.drawElements(gl.LINES, indexBuffer.numberOfItems, gl.UNSIGNED_SHORT,0);
}
*/
function setupWebGL()
{
    gl.clearColor(0.0, 0.0, 0.0, 0.0); 
    gl.clear(gl.COLOR_BUFFER_BIT); 
                 
    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
    mvMatrix = mat4.create();
    pMatrix = mat4.create();
    mat4.perspective(pMatrix, 1.04, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0);
    mat4.identity(mvMatrix);
    mat4.translate(mvMatrix,mvMatrix,[0, 0, -2.0]);
    mat4.rotate(mvMatrix,mvMatrix, 1.9, [0, 1, 0]);
}

        function translateMatrix(matrix, tx, ty) {
            // translation is in last column of matrix
            matrix[12] += matrix[0] * tx + matrix[4] * ty;
            matrix[13] += matrix[1] * tx + matrix[5] * ty;
            matrix[14] += matrix[2] * tx + matrix[6] * ty;
            matrix[15] += matrix[3] * tx + matrix[7] * ty;
        }

        function scaleMatrix(matrix, scaleX, scaleY) {
            // scaling x and y, which is just scaling first two columns of matrix
            matrix[0] *= scaleX;
            matrix[1] *= scaleX;
            matrix[2] *= scaleX;
            matrix[3] *= scaleX;

            matrix[4] *= scaleY;
            matrix[5] *= scaleY;
            matrix[6] *= scaleY;
            matrix[7] *= scaleY;
        }

var utils = {
    create3DContext: function(canvas, options) {
        var context = null,
            names = ["webgl", "experimental-webgl", "webkit-3d", "moz-webgl"];
            
        if (!canvas) canvas = L.DomUtil.create('canvas');
        for (var i = 0, len = names.length; i < len; i++) {
            try {
                context = canvas.getContext(names[i], options);
            } catch(e) {}
            if (context) {
                break;
            }
        }
        return context;
    },
    setupWebGL: function(canvas, data) {
        initShaders();
/*
        // -- WebGl setup
        var vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertexShader, shaders['shader-vs'].value);
        gl.compileShader(vertexShader);

        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, shaders['shader-fs'].value);
        gl.compileShader(fragmentShader);

        // link shaders to create our program
        var program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);
        gl.useProgram(program);
*/
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
        gl.enable(gl.BLEND);
      //  gl.disable(gl.DEPTH_TEST);
        // ----------------------------
        // look up the locations for the inputs to our shaders.
        var u_matLoc = gl.getUniformLocation(shaderProgram, "u_matrix");
        var colorLoc = gl.getAttribLocation(shaderProgram, "a_color");
        var vertLoc = gl.getAttribLocation(shaderProgram, "a_vertex");
        gl.aPointSize = gl.getAttribLocation(shaderProgram, "a_pointSize");
        // Set the matrix to some that makes 1 unit 1 pixel.

        pixelsToWebGLMatrix.set([2 / canvas.width, 0, 0, 0, 0, -2 / canvas.height, 0, 0, 0, 0, 0, 0, -1, 1, 0, 1]);
        gl.viewport(0, 0, canvas.width, canvas.height);

        gl.uniformMatrix4fv(u_matLoc, false, pixelsToWebGLMatrix);
        // -- data
        if (!data || !data.items) return;
        var verts = [];
/*
*/
        var arr = data.items,
            numPoints = arr.length;

        var vertArray = new Float32Array(numPoints * 5),
            bufferIndex = 0;
        arr.map(function (d, i) {
            var it = d.properties,
                geo = it[it.length - 1],
                coord = geo.coordinates;
            vertArray[bufferIndex++] = coord[0];
            vertArray[bufferIndex++] = -coord[1];
            vertArray[bufferIndex++] = Math.random();
            vertArray[bufferIndex++] = Math.random();
            vertArray[bufferIndex++] = Math.random();
        });


        var vertBuffer = gl.createBuffer();
        //var vertArray = new Float32Array(verts);
        var fsize = vertArray.BYTES_PER_ELEMENT;

        gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, vertArray, gl.STATIC_DRAW);
        gl.vertexAttribPointer(vertLoc, 2, gl.FLOAT, false, fsize*5, 0);
        gl.enableVertexAttribArray(vertLoc);
        // -- offset for color buffer
        gl.vertexAttribPointer(colorLoc, 3, gl.FLOAT, false, fsize*5, fsize*2);
        gl.enableVertexAttribArray(colorLoc);

        function drawingOnCanvas(scale, shiftPoint) {
            if (gl == null) return;

            gl.clear(gl.COLOR_BUFFER_BIT);

            pixelsToWebGLMatrix.set([2 / canvas.width, 0, 0, 0, 0, -2 / canvas.height, 0, 0, 0, 0, 0, 0, -1, 1, 0, 1]);
            gl.viewport(0, 0, canvas.width, canvas.height);

            //var pointSize = Math.max(leafletMap.getZoom() - 4.0, 1.0);
            var pointSize = Math.max(leafletMap.getZoom() - 4.0, 12.0);
            gl.vertexAttrib1f(gl.aPointSize, pointSize);

            // -- set base matrix to translate canvas pixel coordinates -> webgl coordinates
            mapMatrix.set(pixelsToWebGLMatrix);

            // var bounds = leafletMap.getBounds();
            // var topLeft = new L.LatLng(bounds.getNorth(), bounds.getWest());
            // var offset = LatLongToPixelXY(topLeft.lat, topLeft.lng);

            // -- Scale to current zoom
            //var scale = Math.pow(2, leafletMap.getZoom());
            scaleMatrix(mapMatrix, scale, scale);

            translateMatrix(mapMatrix, shiftPoint[0]/scale, shiftPoint[1]/scale);

            // -- attach matrix value to 'mapMatrix' uniform in shader
            gl.uniformMatrix4fv(u_matLoc, false, mapMatrix);
            gl.drawArrays(gl.POINTS, 0, numPoints);

        }
        drawingOnCanvas(data.scale, data.shiftPoint);
    }
};

L.gmxOverlayWebGL = {
    draw: function(canvas, data) {
        if (!gl) gl = utils.create3DContext(canvas, options);
console.log('L.gmxOverlayWebGL', arguments);
        utils.setupWebGL(canvas, data);
        return true;
    },
    isWebGL: utils.create3DContext() ? true : false,
    getContext: function(canvas, options) {
        gl = utils.create3DContext(canvas, options);
        return gl;
    },
    setOptions: function(opt) {
        if (opt.leafletMap) leafletMap = opt.leafletMap;
        //L.setOptions(this, opt);
        return this;
    },
    context: null
};
})();