/*Пример конфигурационого файла для ndvi плагина
var defaultMapID = 'ZHP5C';
var serverBase = 'http://maps.kosmosnimki.ru/';
var gmxAuthServer = 'http://my.kosmosnimki.ru/';

var gmxPlugins = [
    {file: './plugins/ndvi/ndvi.js', module: 'ndvi',params: {mapId:'ZHP5C',legendPath:'./plugins/ndvi/legend/NDVI_byte_101_legend.icxleg'}}
];
*/

(function(){
var publicInterface = {
	pluginName: 'ndvi',
	afterViewer: function(params){
			var map = gmxAPI.map;
			$.each(params.legendLayers, function(index, value) {
				var layerLegend = map.layers[value.layerName];
				var mainUrl = value.legendPath;
				layerLegend.addImageProcessingHook(function(obj,attr){
					function getTiles(url){
						var legend=[];
						var canvas = document.createElement("canvas");//Создаем новый элемент canvas
						$.ajax({
							type: "GET",
							url: url,
							dataType: "xml",
							success:function(xml){
								$(xml).find("ENTRY").each(function () {
									var code = $(this).find('Code').text(),
										partRed = $(this).find('Color > Part_Red').text(),
										partGreen = $(this).find('Color > Part_Green').text(),
										partBlue = $(this).find('Color > Part_Blue').text();
										legend[parseInt(code)]={'partRed':parseInt(partRed),'partGreen':parseInt(partGreen),'partBlue':parseInt(partBlue)};
								});
								legend[0]={'partRed':0,'partGreen':0,'partBlue':0};
								canvas.width = 256;
								canvas.height = 256;
								var context = canvas.getContext('2d');// Определяем контекст canvas
								context.drawImage(obj, 0, 0, 256, 256);  // Рисуем изображение от точки с координатами 0,0 шириной и высотой 256(эти параметры можно опустить)
								var imgd = context.getImageData(0, 0, 256, 256);//Получаем данные изображения с canvas
								var pix = imgd.data;//Получаем массив пикселов
								for (var i = 0, n = pix.length; i < n; i += 4){ //В цикле массива пикселов
									if(legend[pix[i]]!==undefined){
										pix[i] = legend[pix[i]].partRed;
										pix[i + 1] = legend[pix[i+1]].partGreen;
										pix[i + 2] = legend[pix[i+2]].partBlue;
									}
								}
								context.putImageData(imgd, 0, 0);//записываем изменненые данные в контекст canvas
							}
						});
						return canvas;//вовращаем canvas
					}
					
					var tile;
					if($.isEmptyObject(value.condition)){
						return getTiles(mainUrl);
					}else{
						$.each(value.condition, function(i, val) {
							if(attr.properties.prodtype==val.field){
								tile=getTiles(val.legendPath);
							}else{
								tile=getTiles(mainUrl);
							}
						});
					}
					return tile;
				});
			});
			var $div = $("<div></div>");
			$.each(params.fieldLayers,function(j,layer){
			var infoLayer = gmxAPI.map.layers[layer.layerName];
			if(!infoLayer.getVisibility())
				infoLayer.setVisible(true);
			infoLayer.addListener("onClick",function(ob){
				var dataMean = new Array();
				var JSON_text;
				var deferreds = [];
				$.each(params.baloonLayers, function(index, value) {
					var deferred = $.Deferred();
					deferreds.push(deferred);
					JSON_text={};
					JSON_text.Border=ob.obj.getGeometry();
					JSON_text.BorderSRS="EPSG:4326";
					JSON_text.Items=[];
					
					var layerBaloon = map.layers[value.layerName];
					layerBaloon.getFeatures(
						function(features){
							if(features.length>0){
								for (var i = 0; i < features.length; i++){
									var dateTmp;
									if(features[i].properties.prodtype==value.condition){
										if(features[i].properties.firstday)
											dateTmp=features[i].properties.firstday;
										else
											dateTmp=features[i].properties.acqdate;
										JSON_text.Items.push({
											"Layers":[features[i].properties.GMX_RasterCatalogID],
											"Channels":["r","g","b"],
											"Return":["Stat"]
										});
										var md = new Date();
										md.setYear(dateTmp.substr(0,4));
										md.setMonth(dateTmp.substr(5,2)-1);
										md.setDate(dateTmp.substr(8,2));
										dataMean.push({layerName:value.layerName,date:md});
									}
								}
							}//end if				
							(function(){
								var host ='http://maps.kosmosnimki.ru/plugins/getrasterhist.ashx';
								var url =host+'Request='+JSON.stringify(JSON_text);
								sendCrossDomainPostRequest(host,{'WrapStyle': 'window','Request':JSON.stringify(JSON_text)},
									function(response){
										if(response && response['Result'] && response['Result'].length > 0) {
											for (var i = 0; i < response['Result'].length; i++){
												dataMean[i]["mean"]=(Number(response['Result'][i].Channels.b.Expectation)-1)/100;
											}
										}
										deferred.resolve();
									}
								);
							})();
						},
						ob.obj.getGeometry()
					);//end getFeature
				});
				$.when.apply($,deferreds).then(function(){
					function compareDate(personA, personB) {
						return personA.date - personB.date;
					}
					dataMean.sort(compareDate);
					var graph = new Array();
					var valueArray = new Array();
					$.each(dataMean, function(index, value){						
						var graphPoint = new Object();
						var year=value.date.getFullYear().toString();
						var month=value.date.getMonth()+1;
						var day=value.date.getDate().toString();
						graphPoint["date"]=year+"-"+month.toString()+"-"+day;
						graphPoint[value.layerName.toString()]=value.mean;
						graph.push(graphPoint);
						valueArray.push(value.layerName);
					});
					
					function unique(arr) {
						var obj = {};
						for(var i=0; i<arr.length; i++) {
							var str = arr[i];
							obj[str] = true;
						}
						return Object.keys(obj);
					}
					valueArray=unique(valueArray);
					$div.dialog({
						title: "Графики среднего значения NDVI",
						zIndex: 3999,
						height:'auto',
						width:'auto',
						draggable:true,
						resizable:false,
						close: function(){
							$div.dialog("destroy");
						}});

					$($div.get(0)).attr('style', "width:630px; height:450px");
					$($div.get(0)).empty();
					$($div.get(0)).append($('<input style="margin-left: 10px;" type="radio" name="radioGroup" id="NDVI16" value="NDVI16"><label for="NDVI16">  NDVI16</label><br><input style="margin-left: 10px;" type="radio" name="radioGroup" id="QUALITY16" value="QUALITY16"><label for="QUALITY16">  QUALITY16</label>').hide());
					$($div.get(0)).append('<div id="line-example" style="width:600px; height:380px"></div>');

					function delta(){
						var eventList= new Array();
						var eventColor= new Array();
						var t1 = new Date(graph[0].date);
						var t2 = new Date(graph[graph.length-1].date);
						var year = t2.getFullYear()-t1.getFullYear();
						if(year>0)
							year=year*12;
						var month = t2.getMonth()-t1.getMonth();
						var months = year+month;
						var delta = Math.ceil(months/8);

						var date = new Date(graph[0].date);
						var strDate="";
						for(var i=0;i<=months;){
							strDate = date.getFullYear()+"-"+date.getMonth()+"-"+date.getDate();

							eventList.push(strDate);
							eventColor.push("#ccc");

							date.setMonth(date.getMonth() + 1 + delta);
							date.setDate(0);

							i+=delta;
						}
						return {eventList:eventList,eventColor:eventColor};
					}
					var events=delta();
					Morris.Line({
						element: 'line-example',
						data: graph,
						xkey: 'date',
						ykeys:valueArray,
						labels:valueArray,
						xLabelFormat: function (x) {
							var monthArray=["январь","февраль","март","апрель","май","июнь","июль","август","сентябрь","октябрь","ноябрь","декабрь"];
							var monthStr=x.getFullYear()+"\n\r"+ monthArray[x.getMonth()];
							return monthStr;
						},
						xLabels:"month",
						events: events.eventList,
						eventLineColors: events.eventColor,
						smooth:false,
						hoverCallback: function (index, options, content) {
							var row = options.data[index];
							var str="";
							str+='<div>Дата: ' + row["date"] + '</div>';
							$.each(valueArray,function(i,v){
								var value=Number(row[v]).toFixed(2);
								if(value!="NaN")
									str+='<div>' + v + ':' + value + '</div>';
							});
							return str;
						},
						integerYLabels: true,
						lineColors:['#FF9900','#FF6633'] // стоит перенести в настройки плагина.
					}).on('click', function(index, obj) {
						var date = nsGmx.Calendar.toUTC($.datepicker.parseDate('yy-mm-dd', obj.date));
						var calendar = nsGmx.widgets.commonCalendar.get();
						calendar.setDateBegin(date, true);
						calendar.setDateEnd(new Date(date.valueOf() + 24*3600*1000 - 1));
						
						$.each(valueArray,function(i,v){
							map.layers[v].setVisible(v in obj);
							var sql;
							if($('input[name=radioGroup]:checked').val()===undefined)
								sql="";
							else
								sql='"prodtype" = \''+$('input[name=radioGroup]:checked').val().toString()+'\'';
							map.layers[v].setVisibilityFilter(sql);
						});
					});
				})
			});
		});
	},
	//beforeViewer:function(){},
	//addMenuItems: addMenuItems
};
window.gmxCore && window.gmxCore.addModule('ndvi', publicInterface,{
		init: function(module, path){
            return $.when(
                gmxCore.loadScript(path + "raphael-min.js"),
                gmxCore.loadScript(path + "morris.min.js")
            );
		}
});
})();
